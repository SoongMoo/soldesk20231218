# founded_rounds필드에 있는 서브 도큐먼트에 있는 investments필드에 있는 도규먼트에 financial_org필드가 있고
financial_org필드에 있는 도규먼트에 있는 permalink필드의 값이 greylock인 것을 출력하시오
이때 name , ipo.pub_year ,  ipo.valuation_amount, funding_rounds.investments.financial_org.permalink 출력
findOne이용하기


> db.companies.find({"funding_rounds.investments.financial_org.permalink" : "greylock"}, 
		 {"name": 1 ,"ipo.pub_year" : 1,  "ipo.valuation_amount" : 1, 
		  "funding_rounds.investments.financial_org.permalink" : 1 , "_id" : 0})
name, ipo.pub_year, ipo.valuation_amount, funding_rounds.investments.financial_org.permalink

> db.companies.aggregate([
	{$match : {"funding_rounds.investments.financial_org.permalink" : "greylock"}},
	{$project : {
		_id : 0,
		name : 1,
		ipo : "$ipo.pub_year",
		valuation : "$ipo.valuation_amount",
		funders : "$funding_rounds.investments.financial_org.permalink" 
	}}
])
# 일부 중첩 필드는 승격(같이 출력)한다.
# "ipo"와 "funding_rounds"필드에 도달할 필드 경로를 표현해 
#   중첩된 도큐먼트 및 배열에서 값을 선택한다.
# 이름을 지정하여 필드값을 출력할 경우에는 필드에 "$"를 붙여서 사용해주면 된다.
select name, ipo.pub_year as ipo , 
	    ipo.valuation_amount as valuation , 
	    funding_rounds.investments.financial_org.permalink as funders 
from companies
where funding_rounds.investments.financial_org.permalink = "greylock"

# name , ipo.pub_year, ipo.valuation_amount, funding_rounds.funded_year
# 조건은 {"funding_rounds.investments.financial_org.permalink" : "greylock"}
# find로 출력
>  db.companies.find({"funding_rounds.investments.financial_org.permalink" : "greylock"},
	{"name" : 1, "ipo.pub_year" : 1, "ipo.valuation_amount" : 1, "funding_rounds.funded_year" : 1, "_id" : 0})

select name, ipo.pub_year as ipo , 
	   ipo.valuation_amount as valuation  , 
	   funding_rounds.funded_year as year
from companies
where funding_rounds.investments.financial_org.permalink = "greylock"
$project에서 필드명을 줘서 출력
> db.companies.aggregate([
    {$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}},
    {$project : {
      _id : 0,
      name : 1,
      ipo : "$ipo.pub_year",
      valuation : "$ipo.valuation_amount",
      year : "$funding_rounds.funded_year"
    }}])

> db.companies.aggregate([
    {$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}}, 
    {$unwind : "$funding_rounds"},
    {$project : {
      _id : 0,
      name : 1,
      ipo : "$ipo.pub_year",
      valuation : "$ipo.valuation_amount",
      year : "$funding_rounds.funded_year"
    }}])

# name , ipo.valuation_amount, funding_rounds.funded_year를 출력
# 조건은 {"funding_rounds.investments.financial_org.permalink" : "greylock"}
# find로 출력
> db.companies.find({"funding_rounds.investments.financial_org.permalink" : "greylock"},
		{"name" : 1 , "ipo.valuation_amount" : 1, "funding_rounds.funded_year" : 1 ,"_id" : 0})
# aggregate로 출력
amount  : ipo.valuation_amount,  year  :  funding_rounds.funded_year
db.companies.aggregate([
    {$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}},
     {$unwind : "$funding_rounds"},
     {$project : {
       _id : 0,
       name : 1,
       amount : "$ipo.valuation_amount",
       year : "$funding_rounds.funded_year"
     }}])

## name, funding_rounds.raised_amount, funding_rounds.funded_year를 출력
# 조건은 {"funding_rounds.investments.financial_org.permalink" : "greylock"}
# find로 출력
> db.companies.find({"funding_rounds.investments.financial_org.permalink" : "greylock"},
		{"name" : 1 , "funding_rounds.raised_amount" : 1, "funding_rounds.funded_year" : 1 ,"_id" : 0})
# aggregate로 출력
amount   : funding_rounds.raised_amount , year  :  funding_rounds.funded_year
> db.companies.aggregate([
    {$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}},
     {$project : {
       _id : 0,
       name : 1,
       amount : "$funding_rounds.raised_amount",
       year : "$funding_rounds.funded_year"
     }}])

> db.companies.aggregate([
    {$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}}, 
    {$unwind : "$funding_rounds"},
     {$project : {
       _id : 0,
       name : 1,
       amount : "$funding_rounds.raised_amount",
       year : "$funding_rounds.funded_year"
     }}])


select name , funded_year , funding_rounds.id, funding_rounds.round_code , funding_rounds.raised_amount
from companies
where funding_rounds.investments.financial_org.permalink = greylock
and funding_rounds.raised_amount >= 100000000
# find로 출력
> db.companies.find({"funding_rounds.investments.financial_org.permalink" : "greylock" 
		, "funding_rounds.raised_amount" : {"$lte" : 100000000}},
		{"name" : 1, "funding_rounds.funded_year" : 1 , "funding_rounds.id" : 1, "funding_rounds.round_code" : 1, 
		 "funding_rounds.raised_amount" : 1})
> db.companies.aggregate(
	 {$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}},
	 {$match:{"funding_rounds.raised_amount" : {"$lte" : 100000000}}},
	{$project : {
		_id : 0,
		name : 1,
		year : "$funding_rounds.funded_year",
		id : "$funding_rounds.id",
		code : "$funding_rounds.round_code",
		amoun : "$funding_rounds.raised_amount"
	}}
)
> db.companies.aggregate(
	 {$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}},
	 {$match:{"funding_rounds.raised_amount" : {"$lte" : 100000000}}},
	{$unwind : "$funding_rounds"},
	{$project : {
		_id : 0,
		name : 1,
		year : "$funding_rounds.funded_year",
		id : "$funding_rounds.id",
		code : "$funding_rounds.round_code",
		amoun : "$funding_rounds.raised_amount"
	}}
)



> db.companies.aggregate([
	{$match:{"funding_rounds.investments.financial_org.permalink" : "greylock"}},
	{$project : {
		_id : 0,
		name : 1,
		funded_year : 1,
		rounds : { $filter : {
		input : "$funding_rounds",
		as : "round",
		cond : { $lte : ["$$round.raised_amount" , 100000000 ]}}}
	}}
])
# $fiter는 배열 필드일 경우에만 가능
# $filter의 첫번째 옵션은 input이며 배열을 지정한다
# 두번째  옵션 as 는 input에 있는 필드명에 대한 변수를 지정한다
# 세번째 옵션 cond은 condition의 약자로 input에 대한 조건을 준다.
# cond에 조건을 사용하는 경우 as에 있는 변수명을 사용할 경우 "$$"를 사용해야 한다.


#첫번째 라운딩과 마자막 라운딩만 꺼낸다. ($arrayElemAt)
# 배열에 있는 첫번째 값과 마지막 값을 꺼내기.
> db.companies.aggregate([
	{$match : {"founded_year" : 2004}},
	{$project : {
		_id : 0,
		name : 1,
		founded_year : 1,
		first_round : {$arrayElemAt : ["$funding_rounds" , 0]},
		last_round : {$arrayElemAt : ["$funding_rounds" , -1]},
	}}
])
# 첫번째는 $arrayElemAt에 0을 마지막은 $arrayElemAt에 -1을 준다.

# funding_rounds에서 첫줄부터 3개만
> db.companies.aggregate([
	{$match : {"founded_year" : 2004}},
	{$project : {
		_id : 0,
		name : 1,
		founded_year : 1,
		early_rounds: {$slice : ["$funding_rounds" , 1, 3]}
	}}
])

# funding_rounds의 배열의 크기
> db.companies.aggregate([
	{$match : {"founded_year" : 2004}},
	{$project : {
		_id : 0,
		name : 1,
		founded_year : 1,
		total_rounds : {$size : ["$funding_rounds"]}
	}}
])

# 누산기 : 모든 집계함수를 누산기라고 한다.
select founded_year, max(funding_rounds.raised_amount)
from companies
group by founded_year

select max(funding_rounds.raised_amount)
from companies
where founded_year = 2004

> db.companies.aggregate([
	 {$match:{"founded_year" : 2004}},
	{$match:{"funding_rounds" : {$exists : true, $ne : []}}},
	{$project: {
		_id : 0,
		name : 1,
		founded_year : 1,
		largest_round : {$max : "$funding_rounds.raised_amount"}
	}}
])

> db.companies.aggregate([
	 {$match:{"founded_year" : 2004}},
	{$match:{"funding_rounds" : {$exists : true, $ne : []}}},
	{$project: {
		_id : 0,
		name : 1,
		founded_year : 1,
		largest_round : {$sum : "$funding_rounds.raised_amount"}
	}}
])

> db.companies.aggregate([
	 {$match:{"founded_year" : 2004}},
	{$match:{"funding_rounds" : {$exists : true, $ne : []}}},
	{$project: {
		_id : 0,
		name : 1,
		founded_year : 1,
		largest_round : {$min : "$funding_rounds.raised_amount"}
	}}
])

> db.companies.aggregate([
	 {$match:{"founded_year" : 2004}},
	{$match:{"funding_rounds" : {$exists : true, $ne : []}}},
	{$project: {
		_id : 0,
		name : 1,
		founded_year : 1,
		largest_round : {$avg : "$funding_rounds.raised_amount"}
	}}
])

# 그룹화 소개

select department_id, sum(salary), max(salary), min(salary), avg(salary)  ,count(department_id) ,count(salary)
from departments
group by department_id
# select 절에는 집계합수 이외에 group by절에 없는 컬럼은 쓸 수 없다.
# 단 집계함수는 null 을 포함하지 않는다,

select founded_year, avg(funding_rounds.raised_amount)
from companies
group by  founded_yea

> db.companies.aggregate([
	{$unwind: "$funding_rounds"}, 
	{$group: {
		_id: {founded_year: "$founded_year"},
		avg_amount: {$avg: "$funding_rounds.raised_amount"}
	}}
])
# $group를 사용하는 경우에는 $funding_rounds가 배열이라 배열 안에 있는 값을 집계할 수 없어서 null이 나온다.
# 이 문제를 해결하는 방법으로는 $unwind를 사용하여 배열을 풀어주면 된다.

> db.companies.aggregate([
	{$unwind: "$funding_rounds"}, 
	{$group: {
		_id: {founded_year: "$founded_year"},
		avg_amount: {$avg: "$funding_rounds.raised_amount"}
	}}
])

> db.companies.aggregate([
	{$match: {"funding_rounds.raised_amount" : {$ne : null}}},
	{$unwind: "$funding_rounds"}, 
	{$group: {
		_id: {founded_year: "$founded_year"},
		avg_amount: {$avg: "$funding_rounds.raised_amount"}
	}},
	{$sort : {avg_amount : -1}}
])

> db.companies.aggregate([
	{$match: {"funding_rounds.raised_amount" : {$ne : null}}},
	{$unwind: "$funding_rounds"}, 
	{$project : {
		_id : 0,
		funding_rounds : 1
	}},
	{$group : {
		_id :  "$funding_rounds", # "$relationships.person"에 있는 필드를 모두 출력
		count : {$sum : 1}
	}},
	{$sort : { count  : -1}}
])
# relationships.person이 있을 때만 수행

relationships.person필드 이름에 대한 도큐먼트를 가진다.
person필드안에 있는 도큐먼트는 first_name, last_name, permalink필드를 가진 도큐먼트이다. 

# founded_year, name를 출력하는 데 founded_year가 2004에 대해서만 출력하세요.
#find로 출력
> db.companies.find({"founded_year" : {"$gte" : 2004}}, {"founded_year" : 1, "name" : 1, "_id" : 0})
{ "name" : "Facebook", "founded_year" : 2004 }
{ "name" : "Facebook", "founded_year" : 2004 }
# group 연산자를 이용해서 위와 같은 결과를 얻어보자.

>  db.companies.aggregate([
    {$match: {"founded_year": {$gte: 2004 }}},
    {$group: {
        _id : { founded_year : "$founded_year" , category_code : "$category_code"},
        companies : { $push : "$name" },
    }},
    {$sort: { "_id.founded_year" : 1}}
])

select departme_id, job_id, sum(salary), max(salary)
from departments
group by departme_id, job_id

select ipo.pub_year, name
from companies
order by ipo.pub_year asc

> db.companies.find({},{"ipo.pub_year" : 1, "name" : 1 }).sort({"ipo.pub_year" : 1})
> db.companies.aggregate([
    {$group: {
        _id : { ipo_year : "$ipo.pub_year" },
        companies : { $push : "$name" }
    }},
    {$sort: { "_id.ipo_year" : 1}}
])

select funding_rounds.raised_amount  , funding_rounds.funded_year
from companies
order by funding_rounds.funded_year asc, funding_rounds.funded_month asc, funding_rounds.funded_day asc

find로 출력
> db.companies.find({}, {"name" : 1, "funding_rounds.raised_amount" : 1, "funding_rounds.funded_year" : 1, "_id" : 0})
	.sort({"funding_rounds.funded_year" : 1, "funding_rounds.funded_month" : 1, "funding_rounds.funded_day" : 1})
{ "funding_rounds" : [ { "raised_amount" : 27500000, "funded_year" : 2006 }, 
		   { "raised_amount" : 15000000, "funded_year" : 2008 } ] }

> db.companies.aggregate([
    {$match : {"funding_rounds": {$ne: []}}}
    {$unwind: "$funding_rounds"},
    {$sort : {"funding_rounds.funded_year" : 1, "funding_rounds.funded_month" : 1, "funding_rounds.funded_day" : 1}},
    {$group: {
        "_id": {company : "$name"},
        funding : {
          $push : {
            amount : "$funding_rounds.raised_amount",
            year : "$funding_rounds.funded_year"
          }
        }
    }}
])

















