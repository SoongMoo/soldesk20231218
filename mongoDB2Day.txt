> db.people.insertOne(
{       "_id" : ObjectId(),
        "relationships" : {
                "friends" : 32,
                "enemies" : 3
        },
        "username" : "joe",
        "age" : 23,
        "location" : "서울"
       }
)
> db.people.find()
### 증가와 감소 : $inc 연산자
# $inc연산자는 증가감만을 하는 것이 아니라 
# 필드가 없으면 필드를 추가한다.
> db.people.updateOne({"username" : "joe", "location" : "서울"},
		 {$inc : {"score" :  50}})
> db.people.findOne()
{
        "_id" : ObjectId("659b9388dc6de9da74872d09"),
        "relationships" : {
                "friends" : 32,
                "enemies" : 3
        },
        "username" : "joe",
        "age" : 23,
        "location" : "서울",
        "score" : 50
}
> db.people.updateOne({"username" : "joe", "location" : "서울"},
		 {$inc : {"score" :  10000}})
> db.people.findOne()
{
        "_id" : ObjectId("659b9388dc6de9da74872d09"),
        "relationships" : {
                "friends" : 32,
                "enemies" : 3
        },
        "username" : "joe",
        "age" : 23,
        "location" : "서울",
        "score" : 10050
}
update people
set score = score + 10000
where username = 'joe' and location = '서울'

> db.people.updateOne({"username" : "joe", "location" : "서울"},
		 {$inc : {"score" :  "10000"}})
#$inc연산자를 사용하는 경우에는 필드의 값이나  갱신해야 하는
값이 숫자이어야만 한다. 
$inc는 int , long, double, decimal타입값에만 사용할 수 있다. 키 값은 무조건 숫자여야 한다,
null, 불리언, 문자열로 나타낸 숫자와 같이 여러 언어에서 숫자로  변환되는 
데이터형의 값에서는 사용할 수 없다.

배열연산자
> db.blog.posts.insertOne(
{ "_id": ObjectId(),
  "title" : "A blog post",
  "content" : "...."}
)
> db.blog.posts.findOne({"title" : "A blog post"})
{
        "_id" : ObjectId("659c95aa434582cd39addf21"),
        "title" : "A blog post",
        "content" : "...."
}
# 댓글 추가
# $push는 도큐먼트 추가
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$push : {"contents" :
                                    {"name":"joe", "email" : "joe@example.com","content":"nice post."}
}})
> db.blog.posts.findOne({"title" : "A blog post"})
{
        "_id" : ObjectId("659c95aa434582cd39addf21"),
        "title" : "A blog post",
        "content" : "....",
        "contents" : [
                {
                        "name" : "joe",
                        "email" : "joe@example.com",
                        "content" : "nice post."
                }
        ]
}
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$push : {"contents" :
                                    {"name":"bob", "email" : "bob@example.com","content":"good post."}
}})
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$set : {"top10" : ["Green Eggs and Ham"]}}
)
# 한번에 여러개의 값을 추가할 수 있다. : $each
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$push : {
				"top10" : {
					$each: ["Nightmare on Elm Street", "Saw"]
					}
			          }
		           })

> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$push : {
				"top10" : {
					$each: ["스타워치", "겨울왕국", "증인"] ,
					$slice : -10
					}
			          }
		           })
$slice에 -10은 도큐먼트가 10개 이내이면 추가를 하고 10가 되면 멈추도록 해라.
10개가 넘가면 앞에것은 삭제를 한다.
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$set : {"top10" : "..."}})
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$push : {
				"top10" : {
					$each: ["Nightmare on Elm Street", "Saw"]
					}
			          }
		           })
$each를 사용하기 위해서는 필드가 배열 이어야 한다.
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$set : {"top10" : []}})
> db.blog.posts.updateOne({"title" : "A blog post"},
		           {$push : {
				"top10" : {
					$each: [{"name" : "이숭무" , "rating" : 4.3},
					          {"name" : "saw" , "rating" : 6.6}] ,
                                                                $slice : -10,
					$sort : {"rating" : -1 }
					}
			          }
		           })
$slice와 $sort 는 $each와 같이 사용해야 한다.

> db.blog.posts.updateOne({"title" : "A blog post"},
		           {
			$push : {
				"hourly" : {
					 $each : [123,526,444,555,965,445]
					}
			           }
		           }
		         )
##  중복데이터가 없이 추가
> db.users.insertOne({"_id" : ObjectId(),
		   "username" : "joe",
		   "email" : ["joe@excample.com","joe@naver.com","joe@daum.net"]
})
> db.users.updateOne({"username" : "joe"},
		    {$addToSet : {"email" : "joe@excample.com"}}
		)
> db.users.findOne({"username" : "joe"})
{
        "_id" : ObjectId("659ca43c434582cd39addf22"),
        "username" : "joe",
        "email" : [
                "joe@excample.com",
                "joe@naver.com",
                "joe@daum.net"
        ]
}
# 값이 중복이 되면 추가되지 않는다.
> db.users.updateOne({"username" : "joe"},
		    {$addToSet : {"email" : "joe@nate.com"}}
		)
> db.users.findOne({"username" : "joe"})
{
        "_id" : ObjectId("659ca43c434582cd39addf22"),
        "username" : "joe",
        "email" : [
                "joe@excample.com",
                "joe@naver.com",
                "joe@daum.net",
                "joe@nate.com"
        ]
}
/// 고유의 값을 여러개를 추가하려면 $addToSet과 $each를 결합하면된다.
> db.users.updateOne({"username" : "joe"}, 
		    {
			$addToSet : {
				 "email" : { 
					$each : ["joe@php.net",
						"joe@example.com",
						"joe@python.org"]
					}
				     }
		    }
)
# 요소제거 : $pull
> db.users.updateOne({},
		  {$pull  : {"email" : "joe@python.org"}
		   }) 
// 배열의 위치(index) 기반 변경
> db.blog.posts.findOne({"title" : "A blog post"})
> db.blog.posts.updateOne({"title" : "A blog post"},{$push : {"contents" : {"name" : "rhee","email" : "rhee@example.com","content" : "rhee post."}}})
> db.blog.posts.updateOne({"title" : "A blog post"},{$push : {"contents" : {"name" : "jang","email" : "jang@example.com","content" : "jang post."}}})
> db.blog.posts.updateOne({"title" : "A blog post"},
		            {$set : {"contents.1.name" : "이숭무"}}
)
> db.blog.posts.updateOne({"contents.name" : "이숭무"},
			{$set : {"contents.$.email" : "이숭무@example.com"}}
)
$는 조건에 맞는 index를 가져온다.
> db.blog.posts.findOne({"title": "A blog post"})
> var post_id = 10 
> db.blog.posts.updateOne(
  		{"title": "A blog post"},
  		{
    			$set: {"top10.$[elem].hidden": true }
  		},
  		{
    		arrayFilters: [
      			{"elem.rating": {$lte : 5}}
    		]
 		}
)
update posts
set subject = "제목"
where title = 'A blog post' and rating <= 5
> db.blog.posts.findOne({"title": "A blog post"})


#갱신 입력(병합) # oracle : merge
var blog = db.analytics.findOne({ url: "/blog" });
if (blog) {
	db.analyties.updateOne( { url: "/blog" },
    			      { $inc: { pageViews: 1 } }
  );
}else{
	db.analytics.insertOne({ url: "/blog", pageViews: 1 });
}
> db.analytics.drop()
> db.analytics.insertOne(
{ "_id" : ObjectId(), 
 "url" : "www.example.com", 
"pageViews" : 53 }
)
> db.analytics.updateOne({"url" : "www.example.com"},
		         {$inc : {"rep" : 3}},
		         {"upset" : true}	
)
db.analytics.find()
{ 
	"_id" : ObjectId("659cb234434582cd39addf24"), 
	"url" : "www.example.com", 
	"pageViews" : 53, 
	"rep" : 3
}
> db.analytics.updateOne({"url" : "www.example.com"},
		         {$inc : {"rep" : 3}},
		         {"upset" : true}	
)

> db.users.drop()
> db.users.insertMany([
  { "_id": ObjectId(), "name": 'joe', "age": 65 , "sex" : "male", "location" : "wisconsin"},
  { "_id": ObjectId(), "name": 'joe', "age": 21 , "sex" : "male", "location" : "wisconsin"},
  { "_id": ObjectId(), "name": 'joe', "age": 49 , "sex" : "male", "location" : "wisconsin"}
])

#다중 도큐먼트 갱신
> db.users.find()
> db.users.updateMany({"name": 'joe'},
		      {$set : {"gift" : "Happy Birthday!"}})
> db.users.find()

# 쿼리 : find()
> db.people.find()
# score가 10050인 것만 출력
> db.people.find({"score" : 10050})
# age가 65인 것만 출력
> db.users.find({"age" : 65})
# name가 joe 이고 age가 65인 것만 출력
> db.users.find({"name": "joe" , "age" : 65})

#select name, age, location
#from users
> db.users.find({}, {"name":1, "age" : 1, "location" : 1})
#_id는 제거
> db.users.find({}, {"name":1, "age" : 1, "location" : 1, "_id" : 0})
# _id만 제거하고 모두 출력
> db.users.find({},{"_id" : 0})
# name 만 빼고 모두
> db.users.find({},{"name" : 0})
# _id제외하고 name제외
> db.users.find({},{"_id" : 0, "name" : 0})
# 쿼리 조건절
<, <=, >, >=을 "$lt" ,"$lte", "$gt", "$gte"

# select * from users
# where age between 18 and 30
> db.users.find({"age" : {"$gte" : 18, "$lte" : 30}})
# age가 21아닌 것만 모두 출력
# select * from users
# where age != 21
> db.users.find({"age" : {"$ne" : 21}})

# select * from  users
# where age in (21, 65)
# select * from  users
# where age = 21 or age = 65)

> db.users.find({"age" : {"$in" : [21, 65]}  })
# select & from users
# where name  = "joe" or name = 1234
> db.users.find({"name" : {"$in" : ["joe", 1234]}  }) 

> db.users.updateMany({"name" : "joe"},
		      {"$set" : {"birthday" : "10/13/1978"}})
> db.users.find({"birthday":{ "$lt" : "2007/01/01"}})
> start = new Date("01/01/2007")
> db.users.find({"birthday":{ "$lt" : start}})
# 출력죄지 않음. 미리초까지 표현이 되어 있어서 비교할 수 없음
> db.users.find({"birthday":{ "$ne" : start}})

# 나이가 21, 65가 아닌 사람만 출력
select * from users
where age not in (21, 65)
> db.users.find({"age" : {"$nin" : [21,65]}})

> db.users.updateOne({"age" : 49},{$set : {"location" : "서울"}})
> db.users.updateOne({"age" : 21},{$set : {"location" : "부산"}})
### 여러개의 필드를 비교
select * from users
where age = 49 or location = '부산'
> db.users.find({"$or" : [{"age":49} , {"location" : "부산"}]}) 
select * from users where age not in (49, 21) or location = '부산'
> db.users.find({"$or" : [{"age" : {$nin : [49,21]}}, {"location" : "부산"}]})

#### $not 
# 나머지
select * from users
where mod(age, 5) = 1 
> db.users.find({"age" : {"$mod" : [5, 1]}})
select * from users
where mod(age, 5) != 1
> db.users.find({"age" : {"$not" : {"$mod": [5, 1]}}})

### 형 특정 쿼리
### null
> db.c.insertMany([
  { "_id": ObjectId(), "y": null},
  { "_id": ObjectId(), "y": 1, },
  { "_id": ObjectId(), "y": 2, }
])
select * from c
where y is null
> db.c.find({"y" : null})
> db.c.find({"z" : null})
{ "_id" : ObjectId("4b2b9f67a1f631733d917a7a"), "y" : null }
{ "_id" : ObjectId("4b2b9f67a1f631733d917a7b"), "y" : 1 }
{ "_id" : ObjectId("4b2b9f67a1f631733d917a7c"), "y" : 2 }

# 필드가 존재하는 경우에만 출력
> db.c.find({"z" : { "$eq" : null , "$exists" : true}})
> db.c.find({"y" : { "$eq" : null , "$exists" : true}})

# 배열에 쿼리하기
> db.food.insertOne({"fruit": ["apple","banana","peach"]})
> db.food.find()
> db.food.find({"fruit" : "banana"})

# 2개이상의 요소가 일치하는 배열을 찾을 때
> db.food.insertMany([ {"fruit": ["apple","kumpuat","orange"]},
	   	     {"fruit": ["cherry","banana"  ,"apple" ]} ])
> db.food.find({"fruit" : "banana"})
select * from
where  fruit = "apple" and fruit = "banana"
> db.food.find({"fruit" : { "$all" : ["apple", "banana"] }})
> db.food.find({"fruit" : { "$all" : ["apple", "orange"] }})
# 배열 요소의 순서가 일치하는 경우
> db.food.find({"fruit": ["apple","kumpuat","orange"]})]
# 배열 요소의 순서가 일치하지 않는 경우
> db.food.find({"fruit": ["apple","orange","kumpuat"]})
# 요소의 순서와 상관없이 요소가 있는 경우에 출력
> db.food.find({"fruit" : { "$all" : ["apple","orange","kumpuat"] }})

# index가 2인 요소가 peach인것만
> db.food.find({"fruit" : "peach"})
> db.food.find({"fruit.2" : "peach"})
{ "_id" : ObjectId("659ce3932b63c0681a4ad6e0"), "fruit" : [ "apple", "banana", "peach" ] }
> db.food.find({"fruit.1" : "peach"})

> db.food.updateOne(
  {"fruit.2": "peach"},
  {"$push": {"fruit": "kiwi"}}
)
# 배열의 사이즈로 
> db.food.find({"fruit" : {$size : 3}})
> db.food.find({"fruit" : {$size : 4}})
# 배열 갱신
> db.food.update({"fruit":"banana"}, {"$push" : {"fruit" : "strawberry"}}  )
> var criteria = {"fruit":"banana"}
> db.food.update(criteria, {"$push" : {"fruit" : "strawberry"} }  )

> var criteria = {"fruit":"kumpuat"}
> db.food.update(
 criteria,
 {
    "$push": {"fruit": "strawberry"},
    "$inc": {"size": 1}
 }
)

# size필드의 값이 1보다 큰 것만 출력
select * from food
where size >= 1
> db.food.find({"size" : {"$gte" : 1}})

# $Slice연산자.
> db.blog.posts.findOne({"title" : "A blog post"})
# 2개뛰고 2개 가져오기 
> db.blog.posts.findOne({"title" : "A blog post"}, {"contents" : {$slice : [2, 2]}})
# 위에서 두개 가져오기
> db.blog.posts.findOne({"title" : "A blog post"}, {"contents" : {$slice : 2}})
# 밑에서 두개 가져오기
> db.blog.posts.findOne({"title" : "A blog post"}, {"contents" : {$slice : -2}})
#  "name"이 "jang"사람의 댓글만 가져오기
> db.blog.posts.findOne({"contents.name" : "jang"})
> db.blog.posts.findOne({"contents.name" : "jang"}, {"contents.$" : 1})

# 배열 및 범위쿼리의 상호 작용
> db.collectionName.insertOne({ 'x': 5 })
> db.collectionName.insertOne({ 'x': 15 })
> db.collectionName.insertOne({ 'x': 25 })
> db.collectionName.insertOne({ 'x': [5, 25]})
> db.collectionName.find()

select * from collectionName
where 'x' > 10 and 'x' < 20
> db.collectionName.find({'x' : {"$gt" : 10 , "$lt" : 20}})
[ 5, 25 ] 는 둘다 5는 20보다 작다에 들어가고 25는 10보다 크다 들어가 때문에
배열이므로 원하지 않는 데이터가 같이 출력

> db.collectionName.find({'x' : {"$elemMatch" :   {"$gt" : 10 , "$lt" : 20}  } })
'x': 15는 배열이 아니라 출력이 되지 않는다.

> db.collectionName.insertOne({ 'x': [13, 18]})
> db.collectionName.find({'x' : {"$elemMatch" :   {"$gt" : 10 , "$lt" : 20}  } })
# 배열안에 있는 값이 모두 조건에 만족해야 출력


# 내장 도큐먼트에 쿼리
> db.blog.posts.findOne({"title" : "A blog post"})
> db.blog.posts.find({"contents.name" : "joe", "contents.email" : "joe@example.com"  })
> db.blog.posts.find({"contents" : {"name" : "joe" ,  "email" : "joe@example.com"} })
# 결과가 없다
> db.blog.posts.find({"top10" : {"name" : "이숭무" , "rating" : {"$lt" : 5}}})
# 결과가 없다
> db.blog.posts.find({"top10.name" : "이숭무", "top10.rating" : {"$lt" : 5}})

# 제한, 건너뛰기, 정렬
> db.c.find()
> db.c.find().limit(2)
> db.c.find().skip(2)
> db.c.find().skip(1)
> db.users.find()
> db.users.find().sort({"age" : 1})  # 오름 차순
> db.users.find().sort({"age" : -1}) # 내림차순
> db.users.find().sort({"name" : 1 , "age" : -1})
select * from users
order by name asc, age desc
> db.users.find().sort({"age" : 1}).limit(2) 
> db.users.find().limit(2) .sort({"age" : 1})
> db.users.find().limit(2) .sort({"age" : 1}).skip(1)

